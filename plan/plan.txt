[목적] 제약사가 재위탁계약관계를 시각적으로 확인하는 프로그램

[이용자] 제약사 담당자

[데이터 베이스]

1. 이용자 정보(users)
id, pw, company_name, biz_no

2. 업체 정보(companies)
comapny_name, biz_no, ceo_name, address, cso_regist_no

3. 계약 정보(contract_relation)
parent_biz_no, child_biz_no

4. 재위탁 정보(subcontract_relation)
pharmacist_biz_no, parent_biz_no, child_biz_no
 

[회원 정책]

제약사 담당자들만 회원으로 관리할 예정
별도의 회원 가입 프로세스 없음
관리자가 아이디, 비밀번호 설정하여 부여함
(비밀번호 난수 생성 안함)
아이디 찾기, 비밀번호 찾기 불필요
로그인 후 내 정보 관리 불필요


[프로세스]

1. 1차 위탁업체 정보

로그인한 이용자(제약사)의 "biz_no"를 
계약 정보(contract_relation)의 "parent_biz_no"에서 찾고,
해당하는 "child_biz_no" 값을
업체 정보(companies)의 "biz_no"에서 찾아서
comapny_name, biz_no, ceo_name, address, cso_regist_no 값을 표기함

2. 재위탁(2차, 3차, 4차..) 업체 정보

"계약 정보(contract_relation)를 참조하지 않음"
계약 정보에 위탁(갑-을)관계가 있다 해도,
갑이 제약사에 통보하지 않았으면 제약사는 알 수 없게 하는게 맞음.
따라서 "재위탁 정보(subcontract_relation)"만을 참조해야 함.

"pharmacist_biz_no"가 현재 로그인한 이용자(제약사)와 일치하는 것들 중에서
1차 위탁업체들의 사업자등록번호를 "pharmacist_biz_no"에서 찾아서,
해당하는 "child_biz_no" 값을
업체 정보(companies)의 "biz_no"에서 찾아서
comapny_name, biz_no, ceo_name, address, cso_regist_no 값을 표기함

이후 3차, 4차, 5차.. 재위탁도 같은 방식임.


[관계도]

1. 필요한 이유

제약사 밑에 위탁업체가 A, B, C, D가 있다고 할때,
B는 A의 하위 업체일 수도 있고,
A의 하위 업체로 A-1이 있는데 C가 A-1의 회원일 수도 있고,
상호 회원일 수도 있어. (C-D 상호간에 갑이자 동시에 을일수도 있어.)
제약사와 1차 위탁업체들만 제외하고는 그물망처럼 얽혀있어.


2. "로드(지연, 느려짐)" 발생 대비책

데이터가 많아지거나 트리 구조로 재귀적으로 하위 업체를 계속 불러오다 보면
서버나 브라우저에서 "로드(지연, 느려짐)"가 발생할 수 있음

최소한의 데이터만 불러오기 (지연 로딩, Lazy Loading)

최초 제약사와 위탁업체는 개수가 많아도 처음에 다 불러오고,
재위탁부터는 한 번에 모든 하위 업체 정보를 다 불러오지 않고,
사용자가 "펼치기" 버튼을 눌렀을 때 그때그때 필요한 하위 정보만 서버에서 받아오는 방식으로 해줘.
하위 업체가 너무 많으면(50개 이상이면) 한 번에 다 보여주지 않고,
50개씩만 보여주고 "더보기" 버튼을 눌렀을 때 추가로 불러오는 방식임.

브라우저 렌더링 최적화

너무 복잡한 HTML 테이블을 한 번에 그리지 않고,
필요한 부분만 동적으로 추가/수정하는 방식으로 렌더링 부담을 줄입니다.

캐싱

이미 한 번 불러온 하위 업체 정보는
다시 펼칠 때 서버에 재요청하지 않고
클라이언트(브라우저)에서 캐싱해서 바로 보여줄 수 있습니다.


[노드 표현]

동그라미 안에 업체명만 나오고
(아래 업체명 표기 방법 참조)
상하 관계를 알 수 있게 갑에서 을로 가는 화살표가 있엇으면 좋겠어.
서로 회원이면 양방향 화살표야.

재위탁업체 수에 비례해 원의 크기 조절

일반적으로 제약사 입장에서 전체가 100개에서 200개 정도인데
20~30% 정도는 0 일거고 -> 원이 없는
20~30% 정도는 1~10 일거고 -> 점에서 작은 원
20~30% 정도는 10~50 일거고 -> 작은 원에서 중간 원
10% 정도는 100 이상일거고 -> 큰 원
3~4개 제일 큰 건 300이상이야.
10 단위 정도로 점점 켜져서 차이가 느껴졌으면  좋겠어.

위탁업체뿐 아니라 재위탁, 재재위탁.. 업체들도 같은 방식으로 재위탁 업체수에 비례해 크기를 조절해줘.

업체명(company_name) 표기 방법
: 원 안에 들어가야 하므로 전체 업체명을 다 표기하지 않고 아래 규칙에 따라 수정하여 표기함.

1) 다음 문구는 생략한다. : "주식회사", "유한회사", "(주)", "(유)"

(예시)
메디링크 주식회사 -> 메디링크
주식회사 메디링크 -> 메디링크
유한회사 메디링크 -> 메디링크
메디링크 유한회사 -> 메디링크
메디링크(주) -> 메디링크
(주)메디링크 -> 메디링크
(유)메디링크 -> 메디링크
메디링크(유) -> 메디링크

2) 괄호()안의 문구는 괄호 기호와 같이 삭제한다.

(예시)
이에스피씨(ESPC) -> 이에스피씨
(합)더좋은팜 -> 더좋은팜
에스디(SD)메디칼 -> 에스디메디칼

3) 띄어쓰기를 삭제한다.

4) 앞뒤에 TRIM 적용해 불필요한 공백을 삭제한다.

5) 상기 1) ~ 4) 조건을 다 적용해도 글자 수가 8자 이상이면 7자..으로 처리한다.

(예시)
제이앤제이토탈서비스 -> 제이앤제이토탈..

6) 글자수가 6글자 이상부터 2줄로 표기한다.
6글자면 -> 3글자(줄바꿈)3글자
7글자면 -> 4글자(줄바꿈)3글자
8글자면 -> 4글자(줄바꿈)4글자


[노드 클릭시 동작 설정]

1. 하위 업체가 있는 경우

1번째 클릭하면 해당 업체 상세 정보가 나오고
2번째 클릭하면 하위 업체들이 펼쳐지고
3번째 클릭하면 하위 업체들이 닫히게 해줘.
4번째 클릭하면 2번 클릭 상태로 (하위 업체들이 펼쳐지고)
5번째 클릭하면 2번 클릭 상태로 (하위 업체들이 닫히고)
..
1 -> 2 -> 3 -> 2 -> 3 -> 2..

2. 하위 업체가 없으면 1번째, 2번째, 3번째.. 계속 클릭해도 1번째 상세 정보가 나온 상태 그대로야.

3. 다른 노드를 선택했다가 다시 돌아왔을 경우 (중요)

A업체를 선택했다가 -> B 업체를 선택했다가 -> 다시 A업체를 선택한 경우
다시 선택한 업체가 하위 업체들이 펼쳐진 상태라면 1 -> 3 -> 2 -> 2 ->.. 상태로 동작함.
이미 펼쳐져 있던 하위 업체들은 그대로 있는 상태에서 해당 업체 상세 정보가 나오고
다시 클릭시 하위 업체가 이미 펼쳐져 있었으므로 2번을 건너뛰고 3번으로 넘어감


[노드 정책]

1. 노드 배치(중복 방지, 원형 배치, 랜덤 반지름)

부모 노드(예: 제약사)를 중심으로,
자식 노드(위탁업체)들을 원형으로 배치합니다.
자식 노드가 많으면, 여러 개의 원(2, 3, 4...)에 분산해서 배치합니다.
각 원의 반지름은 자식 노드 수에 따라 자동으로 커집니다.
각 노드의 각도/거리(반지름)는 랜덤하게 약간씩 조정하여,
노드들이 겹치지 않고 자연스럽게 퍼지도록 합니다.
노드의 크기는 위탁업체 수(자식 수)에 비례하여 커집니다.

2. 노드 선택 시 동작

노드를 클릭하면 해당 업체의 상세 정보가 오른쪽에 표시됩니다.
동시에, 해당 노드의 자식 노드들이 펼쳐집니다.
자식 노드들도 위와 같은 원리(원형, 랜덤 반지름, 중복 방지)로 배치합니다.

3. 중복 방지 및 동적 위치 조정

이미 펼쳐진 다른 노드의 자식들과 겹칠 수 있으므로,
새로 펼쳐지는 자식 노드의 위치를 기존 노드들과 겹치지 않게 조정해야 합니다.
필요하다면, 충돌 감지 후 위치를 재조정하는 로직을 추가합니다.

4. 부모-자식 동기화(드래그/이동)

부모 노드를 드래그하면,
자식 노드들도 함께 이동합니다.
자식 노드가 여러 부모를 가질 경우,
펼쳐진 부모들 사이의 중간 위치로 이동합니다.
즉, 부모가 여러 개 펼쳐져 있으면,
자식 노드는 부모들의 평균 위치로 이동합니다.

5. 노드 닫기(접기) 시 동작
부모 노드를 닫으면,
해당 부모의 모든 자식 노드와 그 하위 노드들까지 재귀적으로 모두 사라집니다.
즉, A - B - C로 펼쳐진 상태에서 A를 닫으면,
B, C 모두 같이 사라집니다.


구현 전략

1. 노드 위치 계산 함수

각 부모 노드의 위치와 자식 노드 수를 받아,
자식 노드들의 (x, y) 좌표를 원형으로 계산
각도는 360 / 자식수로 나누고,
반지름은 기본값 + (자식수 * 계수) + 랜덤값으로 조정

2. 노드 크기 계산

자식 수에 따라 size = 기본값 + (자식수 * 계수)로 설정

3. 충돌 방지

새로 배치할 때, 기존 노드들과의 거리를 체크해서
일정 거리 이하로 겹치지 않게 위치를 미세 조정

4. 드래그/이동 동기화

부모 노드가 이동하면,
자식 노드들의 위치도 같이 이동
자식 노드가 여러 부모를 가질 경우,
펼쳐진 부모들의 평균 위치로 이동

5. 노드 트리 관리

각 노드의 부모/자식 관계를 트리 구조로 관리
펼쳐진 상태, 닫힌 상태, 부모가 사라질 때 자식도 재귀적으로 삭제

---------------------------------------------------------------------------------------------

1. 처음 로딩할때는 로그인한 제약사와 해당 제약사와 계약한 1차 위탁사들만 나오면 되.
예를 들어 삼익제약이 로그인하면 처음엔 가운데 삼익제약이 나오고(지금처럼)
주위에는 contract_relation 테이블에서 parent_biz_no가 삼익제약 "122-81-13217"인 업체들만 (현재 db 기준 112개) 업체들만 나오면 돼.

2. 그 다음부터는 112개 업체를 선택하면 해당 업체들의 하위 업체들이 나오는건데,
이때는 contract_relation 테이블을 참조하는 것이 아니라
subcontract_relation에서 위에 로그인한 제약사 "122-81-13217"에 해당하는 것들 중에서,
parent_biz_no에 해당하는 child_biz_no의 업체들만 보여주면 되는거야.

예를 들어,
 A라는 업체가 contract_relation 테이블상으로는 하위 업체가 10개라고 해도,
 subcontract_relation 테이블상으로는 삼익제약에 7개만 통보했다면 7개만 보여주는게 맞아.
그 이하(재재위탁, 재재재위탁..)도 계속 같은 방식이야.

---------------------------------------------------------------------------------------------


요구사항 이해
1. 초기 로딩(로그인 직후)
중앙 노드: 로그인한 제약사(예: 삼익제약, biz_no: 122-81-13217)
주변 노드:
contract_relation 테이블에서
parent_biz_no = 로그인한 제약사 biz_no
인 1차 위탁업체들만 표시
(예: 삼익제약 기준 112개 업체)
2. 노드(위탁업체) 클릭 시 하위 업체 로딩
contract_relation 테이블은 더 이상 사용하지 않음.
subcontract_relation 테이블을 사용:
조건:
pharmacist_biz_no = 로그인한 제약사 biz_no
parent_biz_no = 클릭한 업체의 biz_no
→ 이 조건에 해당하는 child_biz_no 업체들만 하위 노드로 표시
재위탁, 재재위탁 등 하위 단계도 동일하게 subcontract_relation만 참조
즉, 항상 "로그인한 제약사 기준으로 통보된 subcontract_relation"만 사용
3. 예시
A업체가 contract_relation상 하위 10개가 있어도,
삼익제약(subcontract_relation.pharmacist_biz_no = 122-81-13217) 기준으로 parent_biz_no = A의 child_biz_no가 7개면,
7개만 하위 노드로 표시
그 이하 단계도 계속 같은 방식

